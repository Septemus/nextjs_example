{
  "contractName": "USDT",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/USDT.sol\":\"USDT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"project:/contracts/USDT.sol\":{\"keccak256\":\"0xde903a188033602a294344d13d7097b7b2881013770f4601a30f853678f43c26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3c0039758446bacc161022ec6d63b82ba3763bcefb847351bea453caa0d0f357\",\"dweb:/ipfs/QmZpdvejSLiscq3DZ6j7CzPcFyA35cDNE5j151VZzenii6\"]}},\"version\":1}",
  "bytecode": "0x608034620003d6576040906001600160401b039080830182811182821017620003c0578352600a81526020906915195d1a195c881554d160b21b8282015283519284840184811082821117620003c0578552600493848152631554d11560e21b848201528251828111620003ab576003918254916001958684811c94168015620003a0575b888510146200038b578190601f9485811162000335575b508890858311600114620002ce57600092620002c2575b505060001982861b1c191690861b1783555b8051938411620002ad5786548581811c91168015620002a2575b878210146200028d5782811162000242575b5085918411600114620001d757938394918492600095620001cb575b50501b92600019911b1c19161782555b600580546001600160a01b0319163390811790915515620001b45760025469d3c21bcecceda1000000928382018092116200019f57506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160025533835282815284832084815401905584519384523393a3516108f49081620003dc8239f35b601190634e487b7160e01b6000525260246000fd5b506000602492519163ec442f0560e01b8352820152fd5b0151935038806200010c565b9190601f198416928760005284876000209460005b89898383106200022a57505050106200020f575b50505050811b0182556200011c565b01519060f884600019921b161c191690553880808062000200565b868601518955909701969485019488935001620001ec565b87600052866000208380870160051c82019289881062000283575b0160051c019086905b82811062000276575050620000f0565b6000815501869062000266565b925081926200025d565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000de565b604187634e487b7160e01b6000525260246000fd5b015190503880620000b2565b90889350601f19831691876000528a6000209260005b8c8282106200031e575050841162000305575b505050811b018355620000c4565b015160001983881b60f8161c19169055388080620002f7565b8385015186558c97909501949384019301620002e4565b90915085600052886000208580850160051c8201928b861062000381575b918a91869594930160051c01915b828110620003715750506200009b565b600081558594508a910162000361565b9250819262000353565b602289634e487b7160e01b6000525260246000fd5b93607f169362000084565b604186634e487b7160e01b6000525260246000fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461068c57508163095ea7b3146105e257816318160ddd146105c357816323b872dd146104cc578163313ce567146104b057816340c10f19146103bf57816370a08231146103885781638da5cb5b1461035f57816395d89b411461023e5781639dc29fac1461012457508063a9059cbb146100f45763dd62ed3e146100a957600080fd5b346100f057806003193601126100f057806020926100c56107af565b6100cd6107ca565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100f057806003193601126100f05760209061011d6101136107af565b60243590336107e0565b5160018152f35b839150346100f057826003193601126100f05761013f6107af565b6005549091602435916001600160a01b0390811633036102055783169283156101ee578385528460205285852054918383106101ba5750508184957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936020938688528785520381872055816002540360025551908152a380f35b865163391434e360e21b81526001600160a01b03909216908201908152602081018390526040810184905281906060010390fd5b8551634b637e8f60e11b8152808301869052602490fd5b855162461bcd60e51b8152602081840152601360248201527227b7363c9037bbb732b91031b0b710313ab93760691b6044820152606490fd5b8383346100f057816003193601126100f05780519082845460018160011c9060018316928315610355575b60209384841081146103425783885290811561032657506001146102d1575b505050829003601f01601f191682019267ffffffffffffffff8411838510176102be57508291826102ba925282610766565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106103125750505050830101858080610288565b8054888601830152930192849082016102fc565b60ff1916878501525050151560051b8401019050858080610288565b634e487b7160e01b895260228a52602489fd5b91607f1691610269565b5050346100f057816003193601126100f05760055490516001600160a01b039091168152602090f35b5050346100f05760203660031901126100f05760209181906001600160a01b036103b06107af565b16815280845220549051908152f35b919050346104ac57806003193601126104ac576103da6107af565b60055460243592916001600160a01b039182163303610473571692831561045e576002549083820180921161044b575084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209260025585855284835280852082815401905551908152a380f35b634e487b7160e01b865260119052602485fd5b84602492519163ec442f0560e01b8352820152fd5b825162461bcd60e51b8152602081870152601360248201527213db9b1e481bdddb995c8818d85b881b5a5b9d606a1b6044820152606490fd5b8280fd5b5050346100f057816003193601126100f0576020905160128152f35b905082346105c05760603660031901126105c0576104e86107af565b6104f06107ca565b916044359360018060a01b03831680835260016020528683203384526020528683205491600019831061052c575b60208861011d8989896107e0565b86831061059457811561057d5733156105665750825260016020908152868320338452815291869020908590039055829061011d8761051e565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b80fd5b5050346100f057816003193601126100f0576020906002549051908152f35b9050346104ac57816003193601126104ac576105fc6107af565b602435903315610675576001600160a01b031691821561065e57508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849084346104ac57826003193601126104ac578260035460018160011c906001831692831561075c575b602093848410811461034257838852908115610326575060011461070657505050829003601f01601f191682019267ffffffffffffffff8411838510176102be57508291826102ba925282610766565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106107485750505050830101858080610288565b805488860183015293019284908201610732565b91607f16916106b6565b6020808252825181830181905290939260005b82811061079b57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610779565b600435906001600160a01b03821682036107c557565b600080fd5b602435906001600160a01b03821682036107c557565b916001600160a01b038084169283156108a5571692831561088c576000908382528160205260408220549083821061085a575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fdfea264697066735822122038251dc0d8aff5ebcc1e5b678f60c4477d0f7b18586c336f0b0d2ffc5a4008ee64736f6c63430008180033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461068c57508163095ea7b3146105e257816318160ddd146105c357816323b872dd146104cc578163313ce567146104b057816340c10f19146103bf57816370a08231146103885781638da5cb5b1461035f57816395d89b411461023e5781639dc29fac1461012457508063a9059cbb146100f45763dd62ed3e146100a957600080fd5b346100f057806003193601126100f057806020926100c56107af565b6100cd6107ca565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100f057806003193601126100f05760209061011d6101136107af565b60243590336107e0565b5160018152f35b839150346100f057826003193601126100f05761013f6107af565b6005549091602435916001600160a01b0390811633036102055783169283156101ee578385528460205285852054918383106101ba5750508184957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936020938688528785520381872055816002540360025551908152a380f35b865163391434e360e21b81526001600160a01b03909216908201908152602081018390526040810184905281906060010390fd5b8551634b637e8f60e11b8152808301869052602490fd5b855162461bcd60e51b8152602081840152601360248201527227b7363c9037bbb732b91031b0b710313ab93760691b6044820152606490fd5b8383346100f057816003193601126100f05780519082845460018160011c9060018316928315610355575b60209384841081146103425783885290811561032657506001146102d1575b505050829003601f01601f191682019267ffffffffffffffff8411838510176102be57508291826102ba925282610766565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106103125750505050830101858080610288565b8054888601830152930192849082016102fc565b60ff1916878501525050151560051b8401019050858080610288565b634e487b7160e01b895260228a52602489fd5b91607f1691610269565b5050346100f057816003193601126100f05760055490516001600160a01b039091168152602090f35b5050346100f05760203660031901126100f05760209181906001600160a01b036103b06107af565b16815280845220549051908152f35b919050346104ac57806003193601126104ac576103da6107af565b60055460243592916001600160a01b039182163303610473571692831561045e576002549083820180921161044b575084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209260025585855284835280852082815401905551908152a380f35b634e487b7160e01b865260119052602485fd5b84602492519163ec442f0560e01b8352820152fd5b825162461bcd60e51b8152602081870152601360248201527213db9b1e481bdddb995c8818d85b881b5a5b9d606a1b6044820152606490fd5b8280fd5b5050346100f057816003193601126100f0576020905160128152f35b905082346105c05760603660031901126105c0576104e86107af565b6104f06107ca565b916044359360018060a01b03831680835260016020528683203384526020528683205491600019831061052c575b60208861011d8989896107e0565b86831061059457811561057d5733156105665750825260016020908152868320338452815291869020908590039055829061011d8761051e565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b80fd5b5050346100f057816003193601126100f0576020906002549051908152f35b9050346104ac57816003193601126104ac576105fc6107af565b602435903315610675576001600160a01b031691821561065e57508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849084346104ac57826003193601126104ac578260035460018160011c906001831692831561075c575b602093848410811461034257838852908115610326575060011461070657505050829003601f01601f191682019267ffffffffffffffff8411838510176102be57508291826102ba925282610766565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106107485750505050830101858080610288565b805488860183015293019284908201610732565b91607f16916106b6565b6020808252825181830181905290939260005b82811061079b57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610779565b600435906001600160a01b03821682036107c557565b600080fd5b602435906001600160a01b03821682036107c557565b916001600160a01b038084169283156108a5571692831561088c576000908382528160205260408220549083821061085a575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fdfea264697066735822122038251dc0d8aff5ebcc1e5b678f60c4477d0f7b18586c336f0b0d2ffc5a4008ee64736f6c63430008180033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "114:629:11:-:0;;;;;;-1:-1:-1;;;;;114:629:11;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;114:629:11;;;;;;;;;;;1648:13:2;114:629:11;;;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;;;;;;;;-1:-1:-1;114:629:11;;;;-1:-1:-1;;;;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;;;;;;222:18;114:629;;-1:-1:-1;;;;;;114:629:11;230:10;114:629;;;;;;7509:21:2;7505:91;;6214:21;114:629:11;;;;;;;;;;;;-1:-1:-1;114:629:11;7064:25:2;114:629:11;6214:21:2;114:629:11;230:10;114:629;;;;;;;;;;;;;;;;;;;230:10;7064:25:2;;114:629:11;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;-1:-1:-1;114:629:11;7505:91:2;114:629:11;-1:-1:-1;114:629:11;;;7553:32:2;;;;;;;;114:629:11;7553:32:2;114:629:11;;;;-1:-1:-1;114:629:11;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;-1:-1:-1;114:629:11;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;;;-1:-1:-1;114:629:11;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;-1:-1:-1;114:629:11;;;;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;-1:-1:-1;114:629:11;;-1:-1:-1;114:629:11;;;;;;;;;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;;;-1:-1:-1;;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;-1:-1:-1;114:629:11;;;;;-1:-1:-1;114:629:11;;;;;-1:-1:-1;114:629:11;;;;",
  "deployedSourceMap": "114:629:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3440:5:2;114:629:11;;:::i;:::-;;;735:10:5;;3440:5:2;:::i;:::-;114:629:11;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;676:5;114:629;;;;;;-1:-1:-1;;;;;114:629:11;;;662:10;:19;114:629;;;;8035:21:2;;;8031:89;;114:629:11;;;;;;;;;;6321:19:2;;;;6317:115;;114:629:11;;;;;7064:25:2;114:629:11;;;;;;;;;;;;;;;6791:21:2;114:629:11;;6791:21:2;114:629:11;;;;;7064:25:2;114:629:11;;6317:115:2;114:629:11;;-1:-1:-1;;;6367:50:2;;-1:-1:-1;;;;;114:629:11;;;6367:50:2;;;114:629:11;;;;;;;;;;;;;;;;;;;6367:50:2;;;8031:89;114:629:11;;-1:-1:-1;;;8079:30:2;;;;;114:629:11;;;;;8079:30:2;114:629:11;;;-1:-1:-1;;;114:629:11;;;;;;;;;;;;-1:-1:-1;;;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;114:629:11;;;;;-1:-1:-1;;114:629:11;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;114:629:11;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;114:629:11;;;;;-1:-1:-1;;114:629:11;;;;;;;;-1:-1:-1;114:629:11;;;;;;-1:-1:-1;;;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;143:20;114:629;;;-1:-1:-1;;;;;114:629:11;;;;;;;;;;;;;;;;-1:-1:-1;;114:629:11;;;;;;;;-1:-1:-1;;;;;114:629:11;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;473:5;114:629;;;;;-1:-1:-1;;;;;114:629:11;;;459:10;:19;114:629;;;7509:21:2;;;7505:91;;6214:21;114:629:11;;;;;;;;;;;;;7064:25:2;114:629:11;;;6214:21:2;114:629:11;;;;;;;;;;;;;;;;;;;;7064:25:2;114:629:11;;;-1:-1:-1;;;114:629:11;;;;;;;;7505:91:2;114:629:11;;;;7553:32:2;;;;;;;;114:629:11;7553:32:2;114:629:11;;;-1:-1:-1;;;114:629:11;;;;;;;;;;;;-1:-1:-1;;;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;2761:2:2;114:629:11;;;;;;;;;;;;-1:-1:-1;;114:629:11;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;735:10:5;114:629:11;;;;;;;;10580:17:2;;;10561:36;;10557:309;;114:629:11;;4967:5:2;;;;;;:::i;10557:309::-;10617:24;;;10613:130;;9794:19;;9790:89;;735:10:5;9892:21:2;9888:90;;-1:-1:-1;114:629:11;;;;;;;;;;735:10:5;114:629:11;;;;;;;;;;;;;;;;4967:5:2;10557:309;;;9888:90;114:629:11;;-1:-1:-1;;;9936:31:2;;;;;114:629:11;;;;;9936:31:2;9790:89;114:629:11;;-1:-1:-1;;;9836:32:2;;;;;114:629:11;;;;;9836:32:2;10613:130;114:629:11;;-1:-1:-1;;;10668:60:2;;735:10:5;10668:60:2;;;114:629:11;;;;;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;6367:50:2;;;114:629:11;;;;;;;;;;;;;;;;;;;2908:12:2;114:629:11;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;735:10:5;;9794:19:2;9790:89;;-1:-1:-1;;;;;114:629:11;;9892:21:2;;9888:90;;735:10:5;;;114:629:11;735:10:5;;114:629:11;;8823:4:2;114:629:11;;;;;;;;;;;;;;;;;10066:31:2;735:10:5;;10066:31:2;;114:629:11;8823:4:2;114:629:11;;;9888:90:2;114:629:11;;-1:-1:-1;;;9936:31:2;;;;;114:629:11;;;;;9936:31:2;9790:89;114:629:11;;-1:-1:-1;;;9836:32:2;;;;;114:629:11;;;;;9836:32:2;114:629:11;;;;;;;;;;;;;;;;1837:5:2;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;114:629:11;;;;;-1:-1:-1;;114:629:11;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1837:5:2;114:629:11;;;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;114:629:11;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;114:629:11;;;;;;:::o;5374:300:2:-;;-1:-1:-1;;;;;114:629:11;;;;5457:18:2;;5453:86;;114:629:11;5552:16:2;;;5548:86;;6074:540;114:629:11;;;;;;;;;;;6321:19:2;;;;6317:115;;114:629:11;;;;;7064:25:2;114:629:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;7064:25:2;5374:300::o;6317:115::-;114:629:11;;-1:-1:-1;;;6367:50:2;;-1:-1:-1;;;;;114:629:11;;;;6367:50:2;;;114:629:11;;;;;;;;;;;;;;;;6367:50:2;5548:86;114:629:11;;-1:-1:-1;;;5591:32:2;;5473:1;5591:32;;;114:629:11;;;5591:32:2;5453:86;114:629:11;;-1:-1:-1;;;5498:30:2;;5473:1;5498:30;;;114:629:11;;;5498:30:2",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract USDT is ERC20 {\n    address public owner;\n\n    constructor() ERC20(\"Tether USD\", \"USDT\") {\n        owner = msg.sender;\n        _mint(owner, 1_000_000 * 10 ** decimals()); // Mint 1 million USDT to deployer\n    }\n\n    // Only owner can mint new tokens (if needed)\n    function mint(address to, uint256 amount) external {\n        require(msg.sender == owner, \"Only owner can mint\");\n        _mint(to, amount);\n    }\n\n    // Optional: burn function to destroy tokens\n    function burn(address from, uint256 amount) external {\n        require(msg.sender == owner, \"Only owner can burn\");\n        _burn(from, amount);\n    }\n}\n",
  "sourcePath": "G:\\coding\\blockchain\\truffle-demo\\contracts\\USDT.sol",
  "ast": {
    "absolutePath": "project:/contracts/USDT.sol",
    "exportedSymbols": {
      "Context": [
        831
      ],
      "ERC20": [
        697
      ],
      "IERC20": [
        775
      ],
      "IERC20Errors": [
        87
      ],
      "IERC20Metadata": [
        801
      ],
      "USDT": [
        1488
      ]
    },
    "id": 1489,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1417,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:11"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 1418,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1489,
        "sourceUnit": 698,
        "src": "57:55:11",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1419,
              "name": "ERC20",
              "nameLocations": [
                "131:5:11"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 697,
              "src": "131:5:11"
            },
            "id": 1420,
            "nodeType": "InheritanceSpecifier",
            "src": "131:5:11"
          }
        ],
        "canonicalName": "USDT",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 1488,
        "linearizedBaseContracts": [
          1488,
          697,
          87,
          801,
          775,
          831
        ],
        "name": "USDT",
        "nameLocation": "123:4:11",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "8da5cb5b",
            "id": 1422,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "158:5:11",
            "nodeType": "VariableDeclaration",
            "scope": 1488,
            "src": "143:20:11",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1421,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "143:7:11",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1444,
              "nodeType": "Block",
              "src": "212:122:11",
              "statements": [
                {
                  "expression": {
                    "id": 1432,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1429,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1422,
                      "src": "222:5:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 1430,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "230:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1431,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "234:6:11",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "230:10:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "222:18:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1433,
                  "nodeType": "ExpressionStatement",
                  "src": "222:18:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1435,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1422,
                        "src": "256:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1441,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "315f3030305f303030",
                          "id": 1436,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "263:9:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000_by_1",
                            "typeString": "int_const 1000000"
                          },
                          "value": "1_000_000"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1440,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "3130",
                            "id": 1437,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "275:2:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            "value": "10"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "**",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1438,
                              "name": "decimals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 261,
                              "src": "281:8:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
                                "typeString": "function () view returns (uint8)"
                              }
                            },
                            "id": 1439,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "281:10:11",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "275:16:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "263:28:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1434,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 537,
                      "src": "250:5:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1442,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "250:42:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1443,
                  "nodeType": "ExpressionStatement",
                  "src": "250:42:11"
                }
              ]
            },
            "id": 1445,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "54657468657220555344",
                    "id": 1425,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "190:12:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_9a1ae89798edf3b90847f79f5a01a6aed1a89918d89ec92ed49335597a2f17c1",
                      "typeString": "literal_string \"Tether USD\""
                    },
                    "value": "Tether USD"
                  },
                  {
                    "hexValue": "55534454",
                    "id": 1426,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "204:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_8b1a1d9c2b109e527c9134b25b1a1833b16b6594f92daa9f6d9b7a6024bce9d0",
                      "typeString": "literal_string \"USDT\""
                    },
                    "value": "USDT"
                  }
                ],
                "id": 1427,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 1424,
                  "name": "ERC20",
                  "nameLocations": [
                    "184:5:11"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 697,
                  "src": "184:5:11"
                },
                "nodeType": "ModifierInvocation",
                "src": "184:27:11"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1423,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "181:2:11"
            },
            "returnParameters": {
              "id": 1428,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "212:0:11"
            },
            "scope": 1488,
            "src": "170:164:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1465,
              "nodeType": "Block",
              "src": "441:95:11",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1456,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1453,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "459:3:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1454,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "463:6:11",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "459:10:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 1455,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1422,
                          "src": "473:5:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "459:19:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c79206f776e65722063616e206d696e74",
                        "id": 1457,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "480:21:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_793ac6e41458d545a7714760682dd797072b4fe898c48602bd8c2b836d34baac",
                          "typeString": "literal_string \"Only owner can mint\""
                        },
                        "value": "Only owner can mint"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_793ac6e41458d545a7714760682dd797072b4fe898c48602bd8c2b836d34baac",
                          "typeString": "literal_string \"Only owner can mint\""
                        }
                      ],
                      "id": 1452,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "451:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1458,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "451:51:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1459,
                  "nodeType": "ExpressionStatement",
                  "src": "451:51:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1461,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1447,
                        "src": "518:2:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1462,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1449,
                        "src": "522:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1460,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 537,
                      "src": "512:5:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1463,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "512:17:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1464,
                  "nodeType": "ExpressionStatement",
                  "src": "512:17:11"
                }
              ]
            },
            "functionSelector": "40c10f19",
            "id": 1466,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nameLocation": "399:4:11",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1450,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1447,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "412:2:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 1466,
                  "src": "404:10:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1446,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "404:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1449,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "424:6:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 1466,
                  "src": "416:14:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1448,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "416:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "403:28:11"
            },
            "returnParameters": {
              "id": 1451,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "441:0:11"
            },
            "scope": 1488,
            "src": "390:146:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1486,
              "nodeType": "Block",
              "src": "644:97:11",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1477,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1474,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "662:3:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1475,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "666:6:11",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "662:10:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 1476,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1422,
                          "src": "676:5:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "662:19:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c79206f776e65722063616e206275726e",
                        "id": 1478,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "683:21:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a7bb492d3e23cb9cdab53cc85d429bc7a512a5ff8d0ce2811a6ce4f616436fa2",
                          "typeString": "literal_string \"Only owner can burn\""
                        },
                        "value": "Only owner can burn"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a7bb492d3e23cb9cdab53cc85d429bc7a512a5ff8d0ce2811a6ce4f616436fa2",
                          "typeString": "literal_string \"Only owner can burn\""
                        }
                      ],
                      "id": 1473,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "654:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1479,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "654:51:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1480,
                  "nodeType": "ExpressionStatement",
                  "src": "654:51:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1482,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1468,
                        "src": "721:4:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1483,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1470,
                        "src": "727:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1481,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 570,
                      "src": "715:5:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1484,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "715:19:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1485,
                  "nodeType": "ExpressionStatement",
                  "src": "715:19:11"
                }
              ]
            },
            "functionSelector": "9dc29fac",
            "id": 1487,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "600:4:11",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1471,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1468,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "613:4:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 1487,
                  "src": "605:12:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1467,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "605:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1470,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "627:6:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 1487,
                  "src": "619:14:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1469,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "619:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "604:30:11"
            },
            "returnParameters": {
              "id": 1472,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "644:0:11"
            },
            "scope": 1488,
            "src": "591:150:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1489,
        "src": "114:629:11",
        "usedErrors": [
          57,
          62,
          67,
          76,
          81,
          86
        ],
        "usedEvents": [
          709,
          718
        ]
      }
    ],
    "src": "32:712:11"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.24+commit.e11b9ed9.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        }
      },
      "links": {},
      "address": "0xfB3b19FA57D76379381662C3fffc1f61F63A5ab2",
      "transactionHash": "0xc9d66bdad38b8011b7daa09dbba9afa881b30c0c87558cc19cbd31c614c132ed"
    }
  },
  "schemaVersion": "3.4.16",
  "updatedAt": "2025-05-10T16:19:20.922Z",
  "networkType": "ethereum",
  "devdoc": {
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}